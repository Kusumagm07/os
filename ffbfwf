#include <stdio.h>
#define MAX 25

void firstFit(int b[], int nb, int f[], int nf);
void worstFit(int b[], int nb, int f[], int nf);
void bestFit(int b[], int nb, int f[], int nf);

int main() {
    int b[MAX], f[MAX], nb, nf;

    printf("Memory Management Schemes\n");
    printf("\nEnter the number of blocks: ");
    scanf("%d", &nb);
    printf("Enter the number of files: ");
    scanf("%d", &nf);

    printf("\nEnter the size of the blocks:\n");
    for (int i = 0; i < nb; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &b[i]);
    }

    printf("\nEnter the size of the files:\n");
    for (int i = 0; i < nf; i++) {
        printf("File %d: ", i + 1);
        scanf("%d", &f[i]);
    }

    printf("\nMemory Management Scheme - First Fit\n");
    firstFit(b, nb, f, nf);

    printf("\n\nMemory Management Scheme - Worst Fit\n");
    worstFit(b, nb, f, nf);

    printf("\n\nMemory Management Scheme - Best Fit\n");
    bestFit(b, nb, f, nf);

    return 0;
}

void firstFit(int b[], int nb, int f[], int nf) {
    int bf[MAX] = {0}, ff[MAX], frag[MAX];

    for (int i = 0; i < nf; i++) {
        ff[i] = -1;
        for (int j = 0; j < nb; j++) {
            if (!bf[j] && b[j] >= f[i]) {
                ff[i] = j;
                bf[j] = 1;
                frag[i] = b[j] - f[i];
                break;
            }
        }
    }

    printf("File_no\tFile_size\tBlock_no\tBlock_size\tFragment\n");
    for (int i = 0; i < nf; i++) {
        if (ff[i] != -1)
            printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", i + 1, f[i], ff[i] + 1, b[ff[i]], frag[i]);
        else
            printf("%d\t%d\t\tNot Allocated\n", i + 1, f[i]);
    }
}

void worstFit(int b[], int nb, int f[], int nf) {
    int bf[MAX] = {0}, ff[MAX], frag[MAX];

    for (int i = 0; i < nf; i++) {
        int index = -1, highest = -1;
        for (int j = 0; j < nb; j++) {
            if (!bf[j] && b[j] >= f[i] && b[j] - f[i] > highest) {
                highest = b[j] - f[i];
                index = j;
            }
        }
        ff[i] = index;
        if (index != -1) {
            bf[index] = 1;
            frag[i] = b[index] - f[i];
        }
    }

    printf("File_no\tFile_size\tBlock_no\tBlock_size\tFragment\n");
    for (int i = 0; i < nf; i++) {
        if (ff[i] != -1)
            printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", i + 1, f[i], ff[i] + 1, b[ff[i]], frag[i]);
        else
            printf("%d\t%d\t\tNot Allocated\n", i + 1, f[i]);
    }
}

void bestFit(int b[], int nb, int f[], int nf) {
    int bf[MAX] = {0}, ff[MAX], frag[MAX];

    for (int i = 0; i < nf; i++) {
        int index = -1, lowest = 100000;
        for (int j = 0; j < nb; j++) {
            if (!bf[j] && b[j] >= f[i] && b[j] - f[i] < lowest) {
                lowest = b[j] - f[i];
                index = j;
            }
        }
        ff[i] = index;
        if (index != -1) {
            bf[index] = 1;
            frag[i] = b[index] - f[i];
        }
    }

    printf("File_no\tFile_size\tBlock_no\tBlock_size\tFragment\n");
    for (int i = 0; i < nf; i++) {
        if (ff[i] != -1)
            printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", i + 1, f[i], ff[i] + 1, b[ff[i]], frag[i]);
        else
            printf("%d\t%d\t\tNot Allocated\n", i + 1, f[i]);
    }
}
