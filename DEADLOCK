#include <stdio.h>

int main() {
    int np, nr; // np = number of processes, nr = number of resources
    int alloc[10][10], max[10][10], need[10][10], avail[10];
    int finish[10], mark[10];
    int i, j;

    // Input number of processes and resources
    printf("Enter number of processes: ");
    scanf("%d", &np);
    printf("Enter number of resources: ");
    scanf("%d", &nr);

    // Input Allocation matrix
    printf("Enter allocation matrix:\n");
    for (i = 0; i < np; i++) {
        for (j = 0; j < nr; j++) {
            scanf("%d", &alloc[i][j]);
        }
    }

    // Input Max matrix
    printf("Enter maximum matrix:\n");
    for (i = 0; i < np; i++) {
        for (j = 0; j < nr; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    // Input Available resources
    printf("Enter available resources:\n");
    for (j = 0; j < nr; j++) {
        scanf("%d", &avail[j]);
    }

    // Step 1: Calculate Need matrix = Max - Allocation
    for (i = 0; i < np; i++) {
        for (j = 0; j < nr; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }

    // Step 2: Mark processes with all-zero allocations as finished
    for (i = 0; i < np; i++) {
        int count = 0;
        for (j = 0; j < nr; j++) {
            if (alloc[i][j] == 0)
                count++;
        }
        if (count == nr)
            mark[i] = 1;  // Mark as finished
        else
            mark[i] = 0;  // Not finished yet
    }

    // Step 3: Try to finish other processes
    int flag;
    do {
        flag = 0;
        for (i = 0; i < np; i++) {
            if (mark[i] == 0) {
                int canExecute = 1;
                for (j = 0; j < nr; j++) {
                    if (need[i][j] > avail[j]) {
                        canExecute = 0;
                        break;
                    }
                }
                if (canExecute) {
                    for (j = 0; j < nr; j++) {
                        avail[j] += alloc[i][j];
                    }
                    mark[i] = 1;
                    flag = 1;
                }
            }
        }
    } while (flag);

    // Step 4: Check for deadlock
    int deadlock = 0;
    printf("Deadlocked processes are: ");
    for (i = 0; i < np; i++) {
        if (mark[i] == 0) {
            printf("P%d ", i);
            deadlock = 1;
        }
    }
    if (!deadlock)
        printf("None");
    printf("\n");

    return 0;
}
Deadlock detection
