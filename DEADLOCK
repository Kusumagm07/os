#include <stdio.h>

static int mark[20];
int i, j, np, nr;

int main() {
    int alloc[10][10], request[10][10], avail[10], r[10], w[10];

    // Input the number of processes and resources
    printf("\nEnter the number of processes: ");
    scanf("%d", &np);
    printf("\nEnter the number of resources: ");
    scanf("%d", &nr);

    // Input the total amount of each resource
    for (i = 0; i < nr; i++) {
        printf("\nTotal amount of resource R%d: ", i + 1);
        scanf("%d", &r[i]);
    }

    // Input the request matrix
    printf("\nEnter the request matrix:\n");
    for (i = 0; i < np; i++) {
        for (j = 0; j < nr; j++) {
            scanf("%d", &request[i][j]);
        }
    }

    // Input the allocation matrix
    printf("\nEnter the allocation matrix:\n");
    for (i = 0; i < np; i++) {
        for (j = 0; j < nr; j++) {
            scanf("%d", &alloc[i][j]);
        }
    }

    // Calculate available resources
    for (j = 0; j < nr; j++) {
        avail[j] = r[j];
        for (i = 0; i < np; i++) {
            avail[j] -= alloc[i][j];
        }
    }

    // Mark processes with zero allocation
    for (i = 0; i < np; i++) {
        int count = 0;
        for (j = 0; j < nr; j++) {
            if (alloc[i][j] == 0)
                count++;
            else
                break;
        }
        if (count == nr)
            mark[i] = 1;
    }

    // Initialize work vector 'w' with available resources
    for (j = 0; j < nr; j++) {
        w[j] = avail[j];
    }

    // Mark processes with requests less than or equal to work vector 'w'
    for (i = 0; i < np; i++) {
        int canBeProcessed = 0;
        if (mark[i] != 1) {
            for (j = 0; j < nr; j++) {
                if (request[i][j] <= w[j]) 
                    canBeProcessed = 1;
                else {
                    canBeProcessed = 0;
                    break;
                }
            }

            // If the process can be processed, update the work vector
            if (canBeProcessed) {
                mark[i] = 1;
                for (j = 0; j < nr; j++) {
                    w[j] += alloc[i][j];
                }
            }
        }
    }

    // Check for unmarked processes
    int deadlock = 0;
    for (i = 0; i < np; i++) {
        if (mark[i] != 1)
            deadlock = 1;
    }

    // Output the result
    if (deadlock)
        printf("\nDeadlock detected\n");
    else
        printf("\nNo deadlock possible\n");

    return 0;
}
